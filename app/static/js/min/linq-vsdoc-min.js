Enumerable=function(){var n=function(n){this.GetEnumerator=n};n.Choice=function(n){},n.Cycle=function(n){},n.Empty=function(){},n.From=function(n){},n.Return=function(n){},n.Matches=function(n,t,o){},n.Range=function(n,t,o){},n.RangeDown=function(n,t,o){},n.RangeTo=function(n,t,o){},n.Repeat=function(n,t){},n.RepeatWithFinalize=function(n,t){},n.Generate=function(n,t){},n.ToInfinity=function(n,t){},n.ToNegativeInfinity=function(n,t){},n.Unfold=function(n,t){},n.prototype={CascadeBreadthFirst:function(n,t){},CascadeDepthFirst:function(n,t){},Flatten:function(){},Pairwise:function(n){},Scan:function(n,t,o){},Select:function(n){},SelectMany:function(n,t){},Where:function(n){},OfType:function(n){},Zip:function(n,t){},Join:function(n,t,o,i,u){},GroupJoin:function(n,t,o,i,u){},All:function(n){},Any:function(n){},Concat:function(n){},Insert:function(n,t){},Alternate:function(n){},Contains:function(n,t){},DefaultIfEmpty:function(n){},Distinct:function(n){},Except:function(n,t){},Intersect:function(n,t){},SequenceEqual:function(n,t){},Union:function(n,t){},OrderBy:function(n){return new e},OrderByDescending:function(n){return new e},Reverse:function(){},Shuffle:function(){},GroupBy:function(n,t,o,i){},PartitionBy:function(n,t,o,i){},BufferWithCount:function(n){},Aggregate:function(n,t,o){},Average:function(n){},Count:function(n){},Max:function(n){},Min:function(n){},MaxBy:function(n){},MinBy:function(n){},Sum:function(n){},ElementAt:function(n){},ElementAtOrDefault:function(n,t){},First:function(n){},FirstOrDefault:function(n,t){},Last:function(n){},LastOrDefault:function(n,t){},Single:function(n){},SingleOrDefault:function(n,t){},Skip:function(n){},SkipWhile:function(n){},Take:function(n){},TakeWhile:function(n){},TakeExceptLast:function(n){},TakeFromLast:function(n){},IndexOf:function(n){},LastIndexOf:function(n){},ToArray:function(){},ToLookup:function(n,t,o){return new i},ToObject:function(n,t){},ToDictionary:function(n,t,i){return new o},ToJSON:function(n,t){},ToString:function(n,t){},Do:function(n){},ForEach:function(n){},Write:function(n,t){},WriteLine:function(n){},Force:function(){},Let:function(n){},Share:function(){},MemoizeAll:function(){},Catch:function(n){},Finally:function(n){},Trace:function(n,t){}},n.prototype.GetEnumerator=function(){return new t};var t=function(){};t.prototype.Current=function(){},t.prototype.MoveNext=function(){},t.prototype.Dispose=function(){};var o=function(){};o.prototype={Add:function(n,t){},Get:function(n){},Set:function(n,t){},Contains:function(n){},Clear:function(){},Remove:function(n){},Count:function(){},ToEnumerable:function(){}};var i=function(){};i.prototype={Count:function(){},Get:function(n){},Contains:function(n){},ToEnumerable:function(){}};var u=function(){};u.prototype=new n,u.prototype.Key=function(){};var e=function(){};return e.prototype=new n,e.prototype.ThenBy=function(t){return n.Empty().OrderBy()},e.prototype.ThenByDescending=function(t){return n.Empty().OrderBy()},n}();